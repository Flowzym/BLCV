import {useState,useCallback} from 'react'; import type {Section} from '@/types/section'; export interface AnalysisParams{language?:'de'|'en';goals?:string[]} export interface ATSFeedback{sectionId:string;score:number;issues:string[];suggestions:string[]} export function useATSAnalysis(){const[isLoading,setLoading]=useState(false);const[result,setResult]=useState<ATSFeedback[]|null>(null);const[error,setError]=useState<string|null>(null); const analyze=useCallback(async(sections:Section[],params?:AnalysisParams)=>{setLoading(true);setError(null); try{const res:ATSFeedback[]=sections.map(s=>({sectionId:s.id,score:0.7,issues:[],suggestions:[]})); setResult(res); return res;}catch(e:any){setError(e?.message||'Fehler bei ATS-Analyse'); return []} finally{setLoading(false)}},[]); return { analyze,isLoading,result,error };}
